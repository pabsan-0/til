{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Today I learned... ish","text":"<p>This is a short-documentation repo inspired by the Today I Learned trend. The plan is to note down here useful stuff and snippets that I pick up as I work either on projects or at the job.</p> <p>Note</p> <p>hey</p> <pre><code>code block\n</code></pre> <p>Quote this  </p>","tags":["meta"]},{"location":"Tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>","tags":["meta"]},{"location":"TILs%20directory/code-uri/","title":"code from uri","text":"<p>Open and edit files in vscode from a web app or your browser bar. This is useful in the context of local web applications or documentation management.</p> <ul> <li>Try the following links in your browser to open your <code>/etc/apt/sources.list</code> file</li> </ul> <pre><code>[Edit /tmp/dummyfile on VSCode](vscode://file/tmp/dummyfile)\n[Edit /tmp dir on VSCode](vscode://file/tmp/)\n[Edit /tmp dir on VSCode](vscode://folder/tmp/)\n[Edit /tmp dir on VSCode](vscode://whatever/tmp/)\n</code></pre> <ul> <li>And here's the same in markdown links  </li> </ul> <p>Edit <code>/tmp/dummyfile</code> on VSCode Edit <code>/tmp</code> dir on VSCode Edit <code>/tmp</code> dir on VSCode Edit <code>/tmp</code> dir on VSCode </p>","tags":["vscode","web","ubuntu","meta"]},{"location":"TILs%20directory/complete/","title":"complete","text":"<p>A simple tool to handle shell autocompletion. </p> <pre><code>complete -f my-program      # Autocomplete files in current dir\ncomplete -d my-program      # Autocomplete directories\n\ncomplete -W \"foo bar\" -E    # Autocomplete custom words when shell is empty \n                            # Word separation ruled by $IFS\n\n</code></pre> <p>Here's a more advanced example of a custom function for autocompletion. You'd typically source this script. </p> <ul> <li>From an empty prompt, tabbing will autocomplete for <code>tmuxinator start -p</code></li> <li>After that, it will scan the current dir for the <code>*.yml</code> glob</li> <li>Completion is stopped after 4 words in the prompt</li> </ul> <pre><code>#!/bin/bash\n# Autocompletes for tmuxinator start -p *.yml\n\n_complete_tmuxinator_ls(){\n      # echo $COMP_WORDS\n\n      if [ ${COMP_WORDS[COMP_CWORD-1]} == \"tmuxinator\" ]\n      then \n          COMPREPLY=(\"start\")\n      elif [ ${COMP_WORDS[COMP_CWORD-1]} == \"start\" ]\n      then \n          COMPREPLY=(\"-p\")\n      elif [ $COMP_CWORD -lt 4 ]\n      then\n          COMPREPLY=($(ls -1 | grep -- \"^${COMP_WORDS[COMP_CWORD]}.*.yml\")) #2&gt; /dev/null))\n      else\n          : \n      fi\n      return 0\n}\n\ncomplete -W \"tmuxinator\" -E \ncomplete -F _complete_tmuxinator_ls tmuxinator\n</code></pre>","tags":["ubuntu"]},{"location":"TILs%20directory/find/","title":"find","text":"<p>Find is an essential linux command. Here's some templates </p> <ul> <li>Finding different types of files</li> </ul> <pre><code>find . -type f      # files\nfind . -type l      # symlinks\nfind . -name *.png  # images by extension\n\n</code></pre> <ul> <li>Running commands</li> </ul> <pre><code>find . -name *.txt -exec rm {} \\;                 # the \\; is needed\nfind . -name *.txt -exec cp {} ../my/other/dir \\; # copy files over there\nfind . -name *.png -exec rm ../other/dir/{} \\;    # remove redundant files elsewhere\n</code></pre> <ul> <li>Time fetching</li> </ul> <pre><code>find . -name *.txt -newermt 2002-5-5\nfind . -name *.txt -newermt @1686554460\n</code></pre> <p>more on time here</p>","tags":["find","bash","ubuntu"]},{"location":"TILs%20directory/glow/","title":"glow","text":"<p>A markdown beautifier and indexer for the terminal. You can pin fav docs to be stored user-wide or inspect directory trees with MD files. You can also just open a MD file.</p> <pre><code>glow            # inspect dir\nglow README.md  # inspect file\n</code></pre> <p>Inside <code>glow</code>, press <code>?</code> for a little tooltip.</p> <p>You can set environment variables such as <code>$EDITOR</code> and <code>$PAGER</code> to enhance <code>glow</code>. </p>","tags":["ubuntu","markdown","terminal"]},{"location":"TILs%20directory/ldd/","title":"ldd","text":"<p>Get runtime dependencies of C programs</p> <p>Imagine you've been developing an app in your PC, which has lots of things installed. When writing instructions, what dependencies do you really need?</p> <pre><code>$ ldd ./main.o\n        libgstreamer-1.0.so.0 =&gt; /lib/x86_64-linux-gnu/libgstreamer-1.0.so.0 (0x00007f375de2b000)\n        ...\n</code></pre> <p>Then you can find how to get those with the <code>apt-file</code> tool.</p> <pre><code>$ apt-file search libgstreamer-1.0.so.0\nlibgstreamer1.0-0: /usr/lib/x86_64-linux-gnu/libgstreamer-1.0.so.0\nlibgstreamer1.0-0: /usr/lib/x86_64-linux-gnu/libgstreamer-1.0.so.0.2001.0\nlibgstreamer1.0-0: /usr/lib/x86_64-linux-gnu/libgstreamer-1.0.so.0.2003.0\nlibgstreamer1.0-dev: /usr/share/gdb/auto-load/usr/lib/x86_64-linux-gnu/libgstreamer-1.0.so.0.2001.0-gdb.py\nlibgstreamer1.0-dev: /usr/share/gdb/auto-load/usr/lib/x86_64-linux-gnu/libgstreamer-1.0.so.0.2003.0-gdb.py\n</code></pre>","tags":["apt","c","ubuntu","apt-file","ldd"]},{"location":"TILs%20directory/sshfs/","title":"sshfs","text":"<p>Mount a LAN location on your computer. On the receiving machine, run:</p> <pre><code>$ mkdir mount_point \n$ sshfs user@192.168.21.28:/home/user/shared_location $PWD/mount_point\n</code></pre> <p>When finished, unmount with:</p> <pre><code>umount $PWD/mount_point\n</code></pre> <p>There is probably something better, but you can see the mountpoints via <code>df -s</code>. </p> <p>Extra resources for the reverse operation:</p> <p>https://superuser.com/questions/616182/how-to-mount-local-directory-to-remote-like-sshfs?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa</p> <pre><code>Host $HOSTNAME\n    RequestTTY yes\n    ProxyCommand ncat -l -p 34567 -e /usr/lib/sftp-server &amp; nc %h %p\n    RemoteForward 34568 localhost:34567\n    RemoteCommand sshfs localhost:$MY_DIR $MPOINT -o directport=34568; /bin/bash -li; fusermount -u $MPOINT\n</code></pre>","tags":["ssh"]},{"location":"TILs%20directory/ssh/command-on-arrival/","title":"ssh / command on arrival","text":"<p>When sshing to a LAN device, you can run commands on arrival with:</p> <pre><code>ssh user@192.168.21.28 -t -o RemoteCommand=\"ls; bash\"\n</code></pre> <p>There is a lot more options to it, see:</p> <ul> <li><code>man ssh</code> </li> <li><code>man ssh_config</code> </li> <li><code>man ssh_config 5</code> </li> </ul>","tags":["ssh"]},{"location":"TILs%20directory/vim/comment-multiple-lines/","title":"vim / comment multiple lines","text":"<p>A few multicursor-like operations, but not quite, that can be done in vim</p> <ul> <li><code>Ctrl+V</code>: block visual mode (square selection)</li> <li><code>:%s/^/# /</code> regex</li> </ul>","tags":["vim"]},{"location":"TILs%20directory/vim/comment-multiple-lines/#uncomment-a-line","title":"Uncomment a line:","text":"<pre><code>hjkl        # Place cursor on target characters\nCtrl+V      # for visual block then span the rows\nx\n</code></pre>","tags":["vim"]},{"location":"TILs%20directory/vim/comment-multiple-lines/#comment-a-line-using-inputs","title":"Comment a line using inputs:","text":"<pre><code>hjkl           # Place cursor on target characters\nCtrl+V jjjj    # for visual block then span the rows\nI              # Insert mode  (i would only place a single char)\n#              # write text to insert (will appear on current line)\n&lt;esc&gt;          # after a moment will fill multicursor\n</code></pre>","tags":["vim"]},{"location":"TILs%20directory/vim/comment-multiple-lines/#comment-a-line-using-regex","title":"Comment a line using regex:","text":"<pre><code>hjkl           # Place cursor on target characters\nCtrl+V jjjj    # for visual block then span the rows\n:%s/^/# /      # substitute linestart (not selection start) for comment\n</code></pre>","tags":["vim"]},{"location":"TILs%20directory/vim/search-and-replace/","title":"vim / search and replace","text":"<p>Search and replace utilities.</p> <ul> <li><code>y</code> yank pastes to the <code>\"</code> register by default. </li> <li><code>Ctrl+R \"</code> retrieve text at <code>\"</code> register</li> <li><code>.</code> repeat previous command</li> </ul>","tags":["vim"]},{"location":"TILs%20directory/vim/search-and-replace/#search-selected-text","title":"Search selected text","text":"<pre><code>v             # visual mode and select text\ny             # yank selection, will go into \" register by default\n/             # open search\nCtrl+R  \"     # paste from \" register\n&lt;enter&gt;       # profit\n</code></pre>","tags":["vim"]},{"location":"TILs%20directory/vim/search-and-replace/#replace-using-motions","title":"Replace using motions","text":"<pre><code>/foo &lt;enter&gt;   # search for your match   \ncgn            # change operator `c` then `gn` motion    \nbar &lt;esc&gt;      # write text then escape\n.              # press to repeat operation as many as desired    \n</code></pre>","tags":["vim"]},{"location":"TILs%20directory/vim/search-and-replace/#replace-using-regex","title":"Replace using regex","text":"<pre><code>:%s/foo/bar/g  # easy regex\n</code></pre> <p>Future</p> <ul> <li><code>:%</code>: motion <code>(1,$)</code> </li> <li><code>c</code>: change operator</li> <li><code>gn</code>: motion</li> </ul>","tags":["vim"]}]}